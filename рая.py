from IPython.display import Javascript

def activate_first_cell(nem):
    display(Javascript('IPython.notebook.execute_cells([nem])'))

activate_first_cell(0)
activate_first_cell(1)
activate_first_cell(2)
activate_first_cell(3)
activate_first_cell(4)
activate_first_cell(5)

import telebot
import requests

import json
import time
from urllib.parse import urlencode
import socket
import translate
import random
import urllib.parse
import urllib.request
import re
import threading
from IPython.display import Javascript
from flask import Flask
from apscheduler.schedulers.background import BackgroundScheduler



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç BotFather –≤ Telegram
TELEGRAM_BOT_TOKEN_raya = '7057956602:AAFwL1Ky7lxhtqIbRWNWGtCEKSx5BZqsPZg'
bot_raya = telebot.TeleBot(TELEGRAM_BOT_TOKEN_raya)
bot = bot_raya

# URL API Hugging Face
HUGGING_FACE_API_URL = "https://api-inference.huggingface.co/models/Qwen/QwQ-32B-Preview"
HUGGING_FACE_API_URL_stupid = "https://api-inference.huggingface.co/models/microsoft/Phi-3.5-mini-instruct"


# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API Hugging Face
headers = {"Authorization": "Bearer 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"}


def insert_newline(text):
    sentences = text.split('. ')
    modified_text = ''

    for sentence in sentences:
        modified_text += sentence.strip() + '.'
        # –í—Å—Ç–∞–≤–ª—è–µ–º \n\n —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 50%
        if random.random() < 0.5:
            modified_text += '\n\n'
        else:
            modified_text += ' '

    return modified_text.strip()

def send_long_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ."""
    max_length = 4096
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
    for i in range(0, len(text), max_length):
        bot.send_message(chat_id, text[i:i+max_length])

typing_active = False
typing_thread = None

def typing_action(chat_id):
    global typing_active
    typing_active = True
    while typing_active:
        bot.send_chat_action(chat_id, 'typing')
        time.sleep(1)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç" –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

def stop_typing():
    global typing_active
    typing_active = False
    if typing_thread is not None:
        typing_thread.join()  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞




def contains_never(message):
    return "—Ä–∞—è" in message.lower()


def contains_que(message):
    return "?" in message

def contains_ras(message):
    return "—Ö–æ—á—É –±—ã—Ç—å —Ä–∞—Å—Å—ã–ª—å—â–∏–∫–æ–º" in message.lower()

def translate_text(text, dest_language='en'):
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    base_url = 'https://translate.google.com/m?hl=' + dest_language
    query = urllib.parse.urlencode({'q': text})
    url = base_url + '&' + query

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    with urllib.request.urlopen(url) as response:
        html = response.read().decode('utf-8')

    # –ò—â–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ HTML
    match = re.search(r'<div class="result-container">(.*?)</div>', html)
    if match:
        return match.group(1)
    else:
        return "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"

    return translated_text


def count_characters(text):
    return len(text)

def remove_word(clean_word, word_to_remove):
    import re
    # –ó–∞–º–µ–Ω—è–µ–º —Å–ª–æ–≤–æ –∏ –≤—Å–µ, —á—Ç–æ –∑–∞ –Ω–∏–º, –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä
    pattern = r'\b' + re.escape(word_to_remove) + r'\b.*'
    return re.sub(pattern, '', clean_word, flags=re.IGNORECASE)

instr = "You are in dialogue ‚Ññ. Information about you: you are helpful AI Raya Prime. Give useful information of any topic with links, in short about ant important topic. If you haven't been asked anything, tell about the benefits of 'ML Empire' chat (not long). Use simple words so that everyone understands you. (Write 'stop' at the end of Raya's message. /// (Hello, Raya.) Hello, user! I'm Raya assistant module, the Prime model (made in the Empire).\n\nI'm here to help. Stop. /// (Where are we?) We are in the chat ML empire @roblox_ML_empire, which is dedicated to transactions within Roblox. Our chat is divided into microtemes, these are ¬´–†—ã–Ω–æ–∫¬ª https://t.me/roblox_ML_empire/490 \n\n ¬´–°–∫–∞–º–±–∞–∑–∞¬ª https://t.me/roblox_ML_empire/300 \n\n ¬´–†–∞—Å—Å—ã–ª—å—â–∏–∫–∏¬ª https://t.me/roblox_ML_empire/870 and others.  For example, if you want to be a rassilshikom, then you need to go to the appropriate topic. Stop. /// "

def query_huggingface_api(message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Hugging Face API


    translated = translate_text(message, dest_language='en')
    textok = f" {instr} ({translated}))"
    response = requests.post(
        HUGGING_FACE_API_URL,
        headers=headers,
        json={"inputs": textok}
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å
    if response.status_code == 200:
        return response.json()
    else:
        print(f"–û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ 1 {response.status_code}: {response.text}")
        response = requests.post(
        HUGGING_FACE_API_URL,
        headers=headers,
        json={"inputs": textok}
    )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å
        if response.status_code == 200:
            return response.json()
        else:
            print(f"–û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ 2 {response.status_code}: {response.text}")
            response = requests.post(
            HUGGING_FACE_API_URL_stupid,
            headers=headers,
            json={"inputs": textok}
        )
            if response.status_code == 200:
                return response.json()
            else:
                print(f"–û—à–∏–±–∫–∞ —Ç—É–ø–æ–≥–æ 1 {response.status_code}: {response.text}")
                response = requests.post(
            HUGGING_FACE_API_URL_stupid,
            headers=headers,
            json={"inputs": textok}
        )
                if response.status_code == 200:
                    return response.json()
                else:
                    print(f"–û—à–∏–±–∫–∞ —Ç—É–ø–æ–≥–æ 2 —Ç–µ—Ä–ø–µ–Ω–∏–µ –æ–≤–µ—Ä {response.status_code}: {response.text}")
                return None

@bot_raya.message_handler(func=lambda message: True)
def handle_message(message):
    if contains_never(message.text):
            if not typing_active:

              typing_thread = threading.Thread(target=typing_action, args=(message.chat.id,))
              typing_thread.start()

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Hugging Face API

            hug_response = query_huggingface_api(message.text)

            if hug_response:
                if isinstance(hug_response, list) and len(hug_response) > 0 and 'generated_text' in hug_response[0]:
                    reply = hug_response[0]['generated_text']
                else:
                    reply = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å."
            else:
                reply = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å."

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
            trans = translate_text(message.text, dest_language='en')
            bot_response = reply
            words = bot_response.split()
            promt_words = trans.split()
            do_w = instr.split()

            sorokodin =  len(promt_words) + len(do_w)


            response_text = ' '.join(words[sorokodin:])

            word_to_remove = "stop"
            result = remove_word(response_text, word_to_remove)

            translated_text = translate_text(result, dest_language='ru')
            output_text = insert_newline(translated_text)

            character_count = count_characters(translated_text)
            if character_count > 4096:
              send_long_message(message.chat.id, output_text)
            else:
                answ = f" {output_text} ü§ñ"
                bot_raya.reply_to(message, answ)

    elif contains_que(message.text):
            if not typing_active:
              typing_thread = threading.Thread(target=typing_action, args=(message.chat.id,))
              typing_thread.start()

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Hugging Face API

            hug_response = query_huggingface_api(message.text)

            if hug_response:
                if isinstance(hug_response, list) and len(hug_response) > 0 and 'generated_text' in hug_response[0]:
                    reply = hug_response[0]['generated_text']
                else:
                    reply = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å."
            else:
                reply = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å."

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
            trans = translate_text(message.text, dest_language='en')
            bot_response = reply
            words = bot_response.split()
            promt_words = trans.split()
            do_w = instr.split()

            sorokodin =  len(promt_words) + len(do_w)


            response_text = ' '.join(words[sorokodin:])

            word_to_remove = "stop"
            result = remove_word(response_text, word_to_remove)

            translated_text = translate_text(result, dest_language='ru')
            output_text = insert_newline(translated_text)

            character_count = count_characters(translated_text)
            if character_count > 4096:
              send_long_message(message.chat.id, output_text)
            else:
                answ = f" {output_text} ü§ñ"
                bot_raya.reply_to(message, answ)

    elif contains_ras(message.text):
      bot_raya.reply_to(message, "–†–∞—è —Å–ø–µ—à–∏—Ç –Ω–∞ –ø–æ–º–æ—â—å! \n\n –í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É @Ademmiks –∏ –æ–Ω–∞ –≤–∞–º –≤—Å–µ –æ–±—ä—è—Å–Ω–∏—Ç (—ç—Ç–æ –µ–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç) \n\n –ò –ø–æ–º–Ω–∏—Ç–µ: –ò–º–ø–µ—Ä–∏—è –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –≤–∞—Å! ü§ñ ")



    else:
        rand_nom = random.randint(1, 100)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100

        if 1 <= rand_nom <= 100:

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Hugging Face API
            if not typing_active:
              typing_thread = threading.Thread(target=typing_action, args=(message.chat.id,))
              typing_thread.start()

            hug_response = query_huggingface_api(message.text)

            if hug_response:
                if isinstance(hug_response, list) and len(hug_response) > 0 and 'generated_text' in hug_response[0]:
                    reply = hug_response[0]['generated_text']
                else:
                    reply = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å."
            else:
                reply = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å."

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
            trans = translate_text(message.text, dest_language='en')
            bot_response = reply
            words = bot_response.split()
            promt_words = trans.split()
            do_w = instr.split()

            sorokodin =  len(promt_words) + len(do_w)


            response_text = ' '.join(words[sorokodin:])

            word_to_remove = "stop"
            result = remove_word(response_text, word_to_remove)

            translated_text = translate_text(result, dest_language='ru')
            output_text = insert_newline(translated_text)

            character_count = count_characters(translated_text)
            if character_count > 4096:
              send_long_message(message.chat.id, output_text)
            else:
                answ = f" {output_text} ü§ñ"
                bot_raya.reply_to(message, answ)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–∏


# –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏



app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞
attempts = 0




def my_task():
    global attempts
    attempts = 0  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –∑–∞–¥–∞—á–∏

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    for i in range(7):  # –ë–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±
        activate_first_cell(i)

    bot_raya.polling()

    attempts += 1  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

scheduler = BackgroundScheduler()
scheduler.add_job(func=my_task, trigger='interval', seconds=60)
scheduler.start()

if __name__ == '__main__':
    app.run()

